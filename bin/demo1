#!/usr/bin/env ruby

require 'aws-sdk-ecs'


def list_ecs_container_instances(client, cluster)
  puts "listing ec2_insntance_id of container instances of #{cluster}"
  arns = []
  next_token = nil
  loop do
    resp = client.list_container_instances({
      cluster: cluster,
      next_token: next_token,
      max_results: 3
    })
    arns += resp.container_instance_arns
    next_token = resp.next_token
    break unless next_token
  end

  arns.each_slice(2) do |arns|
    resp = client.describe_container_instances({
      cluster: cluster,
      container_instances: arns
    })

    puts resp.container_instances.map(&:ec2_instance_id)
  end
end

def list_ecs_services(client, cluster)
  puts "listing steady state services of #{cluster}"
  arns = []
  next_token = nil
  loop do
    resp = client.list_services({
      cluster: cluster,
      next_token: next_token,
      max_results: 3
    })
    arns += resp.service_arns
    next_token = resp.next_token
    break unless next_token
  end

  arns.each_slice(2) do |arns|
    resp = client.describe_services({
      cluster: cluster,
      services: arns
    })

    puts (resp.services.select do |s|
      s.running_count == s.desired_count
    end.map(&:service_name))
  end
end

class EnumerateAwsResources
  def initialize(aws_client, *args, **options)
    @aws_client = aws_client
    @args = args
    @list_max = options[:list_max] || 100
    @describe_max = options[:describe_max] || 10
  end

  private
  def _enumerate_arn(resource, *args, **options)
    Enumerator.new do |y|
      next_token = nil
      loop do
        resp = @aws_client.send(
          list_method_name(resource),
          options.merge(
            next_token: next_token,
            max_results: @list_max
          )
        )
        resp.send(identifier_name(resource)).each(&y)
        next_token = resp.next_token
        break unless next_token
      end
    end
  end

  def pluralize(resource)
    "#{resource}s"
  end

  def list_method_name(resource)
    "list_#{pluralize(resource)}"
  end

  def describe_method_name(resource)
    "describe_#{pluralize(resource)}"
  end

  def identifier_name(resource)
    "#{resource}_arns"
  end

  def _enumerate(resource, *args, **options)
    arns = _enumerate_arn(resource, *args, **options)
    Enumerator.new do |y|
      arns.each_slice(@describe_max) do |arns|
        resp = @aws_client.send(
          describe_method_name(resource),
          options.merge({
            pluralize(resource).to_sym => arns
          })
        )
        resp.send(pluralize(resource)).each(&y)
      end
    end
  end

  def method_missing(sym, *args, **options)
    case sym.to_s
    when /^enumerate_(\w+)$/
      _enumerate($1, *args, **options)
    else
      super
    end
  end

end

def demo(client, cluster)
  e = EnumerateAwsResources.new(client, list_max: 3, describe_max: 2)
  puts "listing ec2_insntance_id of container instances of #{cluster} with this gem"
  puts e.enumerate_container_instance(cluster: cluster).map(&:ec2_instance_id)

  puts "listing steady state services of #{cluster} with this gem"
  puts e.enumerate_service(cluster: cluster).select { |s| s.running_count == s.desired_count }.map(&:service_name)
end

cluster = ARGV.shift
unless cluster
  puts "usage: demo1 cluster_name"
  exit 1
end
client = Aws::ECS::Client.new
list_ecs_container_instances(client, cluster)
list_ecs_services(client, cluster)
demo(client, cluster)
